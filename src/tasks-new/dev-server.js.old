import gulp from 'gulp'
import path from 'path'
import map from 'map-stream'
import config from '../config'

gulp.task('dev-server', devServer)

const EOLS = ['\n', '\r\n']

function findStartDelimiter (buffer, delimiter) {
  const delimiterLength = delimiter.length
  const longestDelimiterLength = delimiterLength + 2

  const beginning = buffer.slice(0, longestDelimiterLength).toString()
  for (const eol of EOLS) {
    if (beginning.startsWith(delimiter + eol)) {
      return [0, delimiterLength + eol.length]
    }
  }

  return [-1, -1]
}

function findEndDelimiter (buffer, delimiter, startDelimiterEnd) {
  const delimiterLength = delimiter.length
  let searchStart = startDelimiterEnd

  while (true) {
    let endDelimiterStart = buffer.indexOf('\n' + delimiter, searchStart)
    if (endDelimiterStart === -1) return [-1, -1]

    // compensate newline before delimiter
    endDelimiterStart += 1

    // check if this is the end of buffer
    if (typeof buffer[endDelimiterStart + delimiterLength + 1] === 'undefined') {
      return [endDelimiterStart, endDelimiterStart + delimiterLength]
    }

    for (const eol of EOLS) {
      const start = endDelimiterStart + delimiterLength
      const end = start + eol.length
      if (buffer.slice(start, end).toString() === eol) {
        return [endDelimiterStart, end]
      }
    }

    searchStart = endDelimiterStart + delimiterLength
  }
}

function frontMatterExtract (buffer, delimiter) {
  const extracted = {
    body: buffer
  }

  const [
    , startDelimiterEnd
  ] = findStartDelimiter(buffer, delimiter)
  if (startDelimiterEnd === -1) return extracted

  const [
    endDelimiterStart,
    endDelimiterEnd
  ] = findEndDelimiter(buffer, delimiter, startDelimiterEnd)
  if (endDelimiterStart === -1) return extracted

  const frontmatter = buffer.slice(startDelimiterEnd, endDelimiterStart)
  const body = buffer.slice(endDelimiterEnd)

  return {
    frontmatter,
    body
  }
}

const streamFrontMatterExtract = map((file, cb) => {
  file.buffers = frontMatterExtract(file.contents, '---')
  cb(null, file)
})

const streamHandlebarsCompile = map((file, cb) => {
  console.log(file.path)
  for (const [bufferName, bufferValue] of Object.entries(file.buffers)) {
    console.log(bufferName, JSON.stringify(bufferValue.toString()))
  }
  cb(null, file)
})

function devServer () {
  // handlebars compile partials & load helpers

  const pagesGlob = path.join(config.pages.directory, '**/*.hbs')
  return gulp
    .src(pagesGlob)
    .pipe(streamFrontMatterExtract)
    .pipe(streamHandlebarsCompile)

  // return Promise.resolve()
}
