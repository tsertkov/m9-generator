'use strict';

var _gulp = require('gulp');

var _gulp2 = _interopRequireDefault(_gulp);

var _browserSync = require('browser-sync');

var _browserSync2 = _interopRequireDefault(_browserSync);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackDevMiddleware = require('webpack-dev-middleware');

var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);

var _webpackHotMiddleware = require('webpack-hot-middleware');

var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bsServer = _browserSync2.default.create();
const compiler = (0, _webpack2.default)(_config2.default.webpack);
const webpackHMRSnippet = '<script async src="/assets/webpack-hot-middleware-client.js"></script>';

_gulp2.default.task('dev-browsersync', callback => {
  const noWebpack = !Object.keys(_config2.default.webpack.entry).length;
  const bsConfig = {
    open: false,
    notify: false,
    server: {
      https: true,
      baseDir: _config2.default.paths.dst
    }
  };

  if (noWebpack) {
    launchBrowserSync(bsConfig, callback);
    return;
  }

  bsConfig.snippetOptions = {
    rule: {
      match: /<body[^>]*>/i,
      fn: (snippet, match) => match + snippet + webpackHMRSnippet
    }
  };

  const devMiddleware = (0, _webpackDevMiddleware2.default)(compiler, {
    publicPath: _config2.default.assets.publicPath,
    stats: {
      colors: true,
      context: _config2.default.paths.src
    }
  });

  bsConfig.server.middleware = [devMiddleware, (0, _webpackHotMiddleware2.default)(compiler)];

  devMiddleware.waitUntilValid(() => {
    launchBrowserSync(bsConfig, callback)
    // FIME remove following line when HMR works again
    .watch(_path2.default.join(_config2.default.assets.dst, _config2.default.assets.manifest)).on('change', bsServer.reload);
  });
});

function launchBrowserSync(options, callback) {
  // return early from task
  // and start browserSync in background
  callback();
  bsServer.init(options);

  bsServer.watch(_path2.default.join(_config2.default.paths.dst, '**/*.html')).on('change', bsServer.reload);

  return bsServer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXNrcy9kZXYtYnJvd3NlcnN5bmMuanMiXSwibmFtZXMiOlsiYnNTZXJ2ZXIiLCJicm93c2VyU3luYyIsImNyZWF0ZSIsImNvbXBpbGVyIiwiY29uZmlnIiwid2VicGFjayIsIndlYnBhY2tITVJTbmlwcGV0IiwiZ3VscCIsInRhc2siLCJjYWxsYmFjayIsIm5vV2VicGFjayIsIk9iamVjdCIsImtleXMiLCJlbnRyeSIsImxlbmd0aCIsImJzQ29uZmlnIiwib3BlbiIsIm5vdGlmeSIsInNlcnZlciIsImh0dHBzIiwiYmFzZURpciIsInBhdGhzIiwiZHN0IiwibGF1bmNoQnJvd3NlclN5bmMiLCJzbmlwcGV0T3B0aW9ucyIsInJ1bGUiLCJtYXRjaCIsImZuIiwic25pcHBldCIsImRldk1pZGRsZXdhcmUiLCJwdWJsaWNQYXRoIiwiYXNzZXRzIiwic3RhdHMiLCJjb2xvcnMiLCJjb250ZXh0Iiwic3JjIiwibWlkZGxld2FyZSIsIndhaXRVbnRpbFZhbGlkIiwid2F0Y2giLCJwYXRoIiwiam9pbiIsIm1hbmlmZXN0Iiwib24iLCJyZWxvYWQiLCJvcHRpb25zIiwiaW5pdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsV0FBV0Msc0JBQVlDLE1BQVosRUFBakI7QUFDQSxNQUFNQyxXQUFXLHVCQUFRQyxpQkFBT0MsT0FBZixDQUFqQjtBQUNBLE1BQU1DLG9CQUFvQix3RUFBMUI7O0FBRUFDLGVBQUtDLElBQUwsQ0FBVSxpQkFBVixFQUE4QkMsUUFBRCxJQUFjO0FBQ3pDLFFBQU1DLFlBQVksQ0FBQ0MsT0FBT0MsSUFBUCxDQUFZUixpQkFBT0MsT0FBUCxDQUFlUSxLQUEzQixFQUFrQ0MsTUFBckQ7QUFDQSxRQUFNQyxXQUFXO0FBQ2ZDLFVBQU0sS0FEUztBQUVmQyxZQUFRLEtBRk87QUFHZkMsWUFBUTtBQUNOQyxhQUFPLElBREQ7QUFFTkMsZUFBU2hCLGlCQUFPaUIsS0FBUCxDQUFhQztBQUZoQjtBQUhPLEdBQWpCOztBQVNBLE1BQUlaLFNBQUosRUFBZTtBQUNiYSxzQkFBa0JSLFFBQWxCLEVBQTRCTixRQUE1QjtBQUNBO0FBQ0Q7O0FBRURNLFdBQVNTLGNBQVQsR0FBMEI7QUFDeEJDLFVBQU07QUFDSkMsYUFBTyxjQURIO0FBRUpDLFVBQUksQ0FBQ0MsT0FBRCxFQUFVRixLQUFWLEtBQXFCQSxRQUFRRSxPQUFSLEdBQWtCdEI7QUFGdkM7QUFEa0IsR0FBMUI7O0FBT0EsUUFBTXVCLGdCQUFnQixvQ0FBcUIxQixRQUFyQixFQUErQjtBQUNuRDJCLGdCQUFZMUIsaUJBQU8yQixNQUFQLENBQWNELFVBRHlCO0FBRW5ERSxXQUFPO0FBQ0xDLGNBQVEsSUFESDtBQUVMQyxlQUFTOUIsaUJBQU9pQixLQUFQLENBQWFjO0FBRmpCO0FBRjRDLEdBQS9CLENBQXRCOztBQVFBcEIsV0FBU0csTUFBVCxDQUFnQmtCLFVBQWhCLEdBQTZCLENBQzNCUCxhQUQyQixFQUUzQixvQ0FBcUIxQixRQUFyQixDQUYyQixDQUE3Qjs7QUFLQTBCLGdCQUFjUSxjQUFkLENBQTZCLE1BQU07QUFDakNkLHNCQUFrQlIsUUFBbEIsRUFBNEJOLFFBQTVCO0FBQ0U7QUFERixLQUVHNkIsS0FGSCxDQUVTQyxlQUFLQyxJQUFMLENBQVVwQyxpQkFBTzJCLE1BQVAsQ0FBY1QsR0FBeEIsRUFBNkJsQixpQkFBTzJCLE1BQVAsQ0FBY1UsUUFBM0MsQ0FGVCxFQUdHQyxFQUhILENBR00sUUFITixFQUdnQjFDLFNBQVMyQyxNQUh6QjtBQUlELEdBTEQ7QUFNRCxDQTFDRDs7QUE0Q0EsU0FBU3BCLGlCQUFULENBQTRCcUIsT0FBNUIsRUFBcUNuQyxRQUFyQyxFQUErQztBQUM3QztBQUNBO0FBQ0FBO0FBQ0FULFdBQVM2QyxJQUFULENBQWNELE9BQWQ7O0FBRUE1QyxXQUNHc0MsS0FESCxDQUNTQyxlQUFLQyxJQUFMLENBQVVwQyxpQkFBT2lCLEtBQVAsQ0FBYUMsR0FBdkIsRUFBNEIsV0FBNUIsQ0FEVCxFQUVHb0IsRUFGSCxDQUVNLFFBRk4sRUFFZ0IxQyxTQUFTMkMsTUFGekI7O0FBSUEsU0FBTzNDLFFBQVA7QUFDRCIsImZpbGUiOiJkZXYtYnJvd3NlcnN5bmMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ3VscCBmcm9tICdndWxwJ1xuaW1wb3J0IGJyb3dzZXJTeW5jIGZyb20gJ2Jyb3dzZXItc3luYydcbmltcG9ydCB3ZWJwYWNrIGZyb20gJ3dlYnBhY2snXG5pbXBvcnQgd2VicGFja0Rldk1pZGRsZXdhcmUgZnJvbSAnd2VicGFjay1kZXYtbWlkZGxld2FyZSdcbmltcG9ydCB3ZWJwYWNrSG90TWlkZGxld2FyZSBmcm9tICd3ZWJwYWNrLWhvdC1taWRkbGV3YXJlJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBjb25maWcgZnJvbSAnLi4vY29uZmlnJ1xuXG5jb25zdCBic1NlcnZlciA9IGJyb3dzZXJTeW5jLmNyZWF0ZSgpXG5jb25zdCBjb21waWxlciA9IHdlYnBhY2soY29uZmlnLndlYnBhY2spXG5jb25zdCB3ZWJwYWNrSE1SU25pcHBldCA9ICc8c2NyaXB0IGFzeW5jIHNyYz1cIi9hc3NldHMvd2VicGFjay1ob3QtbWlkZGxld2FyZS1jbGllbnQuanNcIj48L3NjcmlwdD4nXG5cbmd1bHAudGFzaygnZGV2LWJyb3dzZXJzeW5jJywgKGNhbGxiYWNrKSA9PiB7XG4gIGNvbnN0IG5vV2VicGFjayA9ICFPYmplY3Qua2V5cyhjb25maWcud2VicGFjay5lbnRyeSkubGVuZ3RoXG4gIGNvbnN0IGJzQ29uZmlnID0ge1xuICAgIG9wZW46IGZhbHNlLFxuICAgIG5vdGlmeTogZmFsc2UsXG4gICAgc2VydmVyOiB7XG4gICAgICBodHRwczogdHJ1ZSxcbiAgICAgIGJhc2VEaXI6IGNvbmZpZy5wYXRocy5kc3RcbiAgICB9XG4gIH1cblxuICBpZiAobm9XZWJwYWNrKSB7XG4gICAgbGF1bmNoQnJvd3NlclN5bmMoYnNDb25maWcsIGNhbGxiYWNrKVxuICAgIHJldHVyblxuICB9XG5cbiAgYnNDb25maWcuc25pcHBldE9wdGlvbnMgPSB7XG4gICAgcnVsZToge1xuICAgICAgbWF0Y2g6IC88Ym9keVtePl0qPi9pLFxuICAgICAgZm46IChzbmlwcGV0LCBtYXRjaCkgPT4gKG1hdGNoICsgc25pcHBldCArIHdlYnBhY2tITVJTbmlwcGV0KVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGRldk1pZGRsZXdhcmUgPSB3ZWJwYWNrRGV2TWlkZGxld2FyZShjb21waWxlciwge1xuICAgIHB1YmxpY1BhdGg6IGNvbmZpZy5hc3NldHMucHVibGljUGF0aCxcbiAgICBzdGF0czoge1xuICAgICAgY29sb3JzOiB0cnVlLFxuICAgICAgY29udGV4dDogY29uZmlnLnBhdGhzLnNyY1xuICAgIH1cbiAgfSlcblxuICBic0NvbmZpZy5zZXJ2ZXIubWlkZGxld2FyZSA9IFtcbiAgICBkZXZNaWRkbGV3YXJlLFxuICAgIHdlYnBhY2tIb3RNaWRkbGV3YXJlKGNvbXBpbGVyKVxuICBdXG5cbiAgZGV2TWlkZGxld2FyZS53YWl0VW50aWxWYWxpZCgoKSA9PiB7XG4gICAgbGF1bmNoQnJvd3NlclN5bmMoYnNDb25maWcsIGNhbGxiYWNrKVxuICAgICAgLy8gRklNRSByZW1vdmUgZm9sbG93aW5nIGxpbmUgd2hlbiBITVIgd29ya3MgYWdhaW5cbiAgICAgIC53YXRjaChwYXRoLmpvaW4oY29uZmlnLmFzc2V0cy5kc3QsIGNvbmZpZy5hc3NldHMubWFuaWZlc3QpKVxuICAgICAgLm9uKCdjaGFuZ2UnLCBic1NlcnZlci5yZWxvYWQpXG4gIH0pXG59KVxuXG5mdW5jdGlvbiBsYXVuY2hCcm93c2VyU3luYyAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgLy8gcmV0dXJuIGVhcmx5IGZyb20gdGFza1xuICAvLyBhbmQgc3RhcnQgYnJvd3NlclN5bmMgaW4gYmFja2dyb3VuZFxuICBjYWxsYmFjaygpXG4gIGJzU2VydmVyLmluaXQob3B0aW9ucylcblxuICBic1NlcnZlclxuICAgIC53YXRjaChwYXRoLmpvaW4oY29uZmlnLnBhdGhzLmRzdCwgJyoqLyouaHRtbCcpKVxuICAgIC5vbignY2hhbmdlJywgYnNTZXJ2ZXIucmVsb2FkKVxuXG4gIHJldHVybiBic1NlcnZlclxufVxuIl19