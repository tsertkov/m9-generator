'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _requireDir = require('require-dir');

var _requireDir2 = _interopRequireDefault(_requireDir);

var _fs = require('fs');

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = loadContent;


function loadContent(options) {
  const {
    directory,
    transformer
  } = options;

  const staticDir = _path2.default.join(directory, 'static');
  const dynamicDir = _path2.default.join(directory, 'dynamic');

  const content = loadJsonContent(staticDir);
  if (transformer) transformContent(content, transformer);
  runAugmentersFromDir(dynamicDir, content);

  return content;
}

function loadJsonContent(dir) {
  if ((0, _fs.existsSync)(dir)) {
    return (0, _requireDir2.default)(dir);
  }
  return {};
}

function runAugmentersFromDir(dir, content) {
  if (!(0, _fs.existsSync)(dir)) {
    return;
  }

  const augmenters = (0, _requireDir2.default)(dir);
  Object.keys(augmenters).forEach(contentType => {
    const augment = augmenters[contentType];
    const entities = content[contentType];

    if (!entities) {
      content[contentType] = augment({}, content, _config2.default);
      return;
    }

    if (!Array.isArray(entities)) {
      content[contentType] = augment(entities, content, _config2.default);
      return;
    }

    content[contentType] = entities.map(entity => augment(entity, content, _config2.default));
  });
}

function transformContent(content, transformerName) {
  const transformerFn = transformerByName(transformerName);
  transformerFn(content);
}

function transformerByName(transformerName) {
  try {
    return require(`./content-transformers/${transformerName}`);
  } catch (error) {
    throw new Error(`Unsupported transformer "${transformerName}"`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvbG9hZC1jb250ZW50LmpzIl0sIm5hbWVzIjpbImxvYWRDb250ZW50Iiwib3B0aW9ucyIsImRpcmVjdG9yeSIsInRyYW5zZm9ybWVyIiwic3RhdGljRGlyIiwicGF0aCIsImpvaW4iLCJkeW5hbWljRGlyIiwiY29udGVudCIsImxvYWRKc29uQ29udGVudCIsInRyYW5zZm9ybUNvbnRlbnQiLCJydW5BdWdtZW50ZXJzRnJvbURpciIsImRpciIsImF1Z21lbnRlcnMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImNvbnRlbnRUeXBlIiwiYXVnbWVudCIsImVudGl0aWVzIiwiY29uZmlnIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiZW50aXR5IiwidHJhbnNmb3JtZXJOYW1lIiwidHJhbnNmb3JtZXJGbiIsInRyYW5zZm9ybWVyQnlOYW1lIiwicmVxdWlyZSIsImVycm9yIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O2tCQUVlQSxXOzs7QUFFZixTQUFTQSxXQUFULENBQXNCQyxPQUF0QixFQUErQjtBQUM3QixRQUFNO0FBQ0pDLGFBREk7QUFFSkM7QUFGSSxNQUdGRixPQUhKOztBQUtBLFFBQU1HLFlBQVlDLGVBQUtDLElBQUwsQ0FBVUosU0FBVixFQUFxQixRQUFyQixDQUFsQjtBQUNBLFFBQU1LLGFBQWFGLGVBQUtDLElBQUwsQ0FBVUosU0FBVixFQUFxQixTQUFyQixDQUFuQjs7QUFFQSxRQUFNTSxVQUFVQyxnQkFBZ0JMLFNBQWhCLENBQWhCO0FBQ0EsTUFBSUQsV0FBSixFQUFpQk8saUJBQWlCRixPQUFqQixFQUEwQkwsV0FBMUI7QUFDakJRLHVCQUFxQkosVUFBckIsRUFBaUNDLE9BQWpDOztBQUVBLFNBQU9BLE9BQVA7QUFDRDs7QUFFRCxTQUFTQyxlQUFULENBQTBCRyxHQUExQixFQUErQjtBQUM3QixNQUFJLG9CQUFXQSxHQUFYLENBQUosRUFBcUI7QUFDbkIsV0FBTywwQkFBV0EsR0FBWCxDQUFQO0FBQ0Q7QUFDRCxTQUFPLEVBQVA7QUFDRDs7QUFFRCxTQUFTRCxvQkFBVCxDQUErQkMsR0FBL0IsRUFBb0NKLE9BQXBDLEVBQTZDO0FBQzNDLE1BQUksQ0FBQyxvQkFBV0ksR0FBWCxDQUFMLEVBQXNCO0FBQ3BCO0FBQ0Q7O0FBRUQsUUFBTUMsYUFBYSwwQkFBV0QsR0FBWCxDQUFuQjtBQUNBRSxTQUFPQyxJQUFQLENBQVlGLFVBQVosRUFBd0JHLE9BQXhCLENBQWdDQyxlQUFlO0FBQzdDLFVBQU1DLFVBQVVMLFdBQVdJLFdBQVgsQ0FBaEI7QUFDQSxVQUFNRSxXQUFXWCxRQUFRUyxXQUFSLENBQWpCOztBQUVBLFFBQUksQ0FBQ0UsUUFBTCxFQUFlO0FBQ2JYLGNBQVFTLFdBQVIsSUFBdUJDLFFBQVEsRUFBUixFQUFZVixPQUFaLEVBQXFCWSxnQkFBckIsQ0FBdkI7QUFDQTtBQUNEOztBQUVELFFBQUksQ0FBQ0MsTUFBTUMsT0FBTixDQUFjSCxRQUFkLENBQUwsRUFBOEI7QUFDNUJYLGNBQVFTLFdBQVIsSUFBdUJDLFFBQVFDLFFBQVIsRUFBa0JYLE9BQWxCLEVBQTJCWSxnQkFBM0IsQ0FBdkI7QUFDQTtBQUNEOztBQUVEWixZQUFRUyxXQUFSLElBQXVCRSxTQUFTSSxHQUFULENBQWFDLFVBQVVOLFFBQVFNLE1BQVIsRUFBZ0JoQixPQUFoQixFQUF5QlksZ0JBQXpCLENBQXZCLENBQXZCO0FBQ0QsR0FmRDtBQWdCRDs7QUFFRCxTQUFTVixnQkFBVCxDQUEyQkYsT0FBM0IsRUFBb0NpQixlQUFwQyxFQUFxRDtBQUNuRCxRQUFNQyxnQkFBZ0JDLGtCQUFrQkYsZUFBbEIsQ0FBdEI7QUFDQUMsZ0JBQWNsQixPQUFkO0FBQ0Q7O0FBRUQsU0FBU21CLGlCQUFULENBQTRCRixlQUE1QixFQUE2QztBQUMzQyxNQUFJO0FBQ0YsV0FBT0csUUFBUywwQkFBeUJILGVBQWdCLEVBQWxELENBQVA7QUFDRCxHQUZELENBRUUsT0FBT0ksS0FBUCxFQUFjO0FBQ2QsVUFBTSxJQUFJQyxLQUFKLENBQVcsNEJBQTJCTCxlQUFnQixHQUF0RCxDQUFOO0FBQ0Q7QUFDRiIsImZpbGUiOiJsb2FkLWNvbnRlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHJlcXVpcmVEaXIgZnJvbSAncmVxdWlyZS1kaXInXG5pbXBvcnQgeyBleGlzdHNTeW5jIH0gZnJvbSAnZnMnXG5pbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZydcblxuZXhwb3J0IGRlZmF1bHQgbG9hZENvbnRlbnRcblxuZnVuY3Rpb24gbG9hZENvbnRlbnQgKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGRpcmVjdG9yeSxcbiAgICB0cmFuc2Zvcm1lclxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IHN0YXRpY0RpciA9IHBhdGguam9pbihkaXJlY3RvcnksICdzdGF0aWMnKVxuICBjb25zdCBkeW5hbWljRGlyID0gcGF0aC5qb2luKGRpcmVjdG9yeSwgJ2R5bmFtaWMnKVxuXG4gIGNvbnN0IGNvbnRlbnQgPSBsb2FkSnNvbkNvbnRlbnQoc3RhdGljRGlyKVxuICBpZiAodHJhbnNmb3JtZXIpIHRyYW5zZm9ybUNvbnRlbnQoY29udGVudCwgdHJhbnNmb3JtZXIpXG4gIHJ1bkF1Z21lbnRlcnNGcm9tRGlyKGR5bmFtaWNEaXIsIGNvbnRlbnQpXG5cbiAgcmV0dXJuIGNvbnRlbnRcbn1cblxuZnVuY3Rpb24gbG9hZEpzb25Db250ZW50IChkaXIpIHtcbiAgaWYgKGV4aXN0c1N5bmMoZGlyKSkge1xuICAgIHJldHVybiByZXF1aXJlRGlyKGRpcilcbiAgfVxuICByZXR1cm4ge31cbn1cblxuZnVuY3Rpb24gcnVuQXVnbWVudGVyc0Zyb21EaXIgKGRpciwgY29udGVudCkge1xuICBpZiAoIWV4aXN0c1N5bmMoZGlyKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgYXVnbWVudGVycyA9IHJlcXVpcmVEaXIoZGlyKVxuICBPYmplY3Qua2V5cyhhdWdtZW50ZXJzKS5mb3JFYWNoKGNvbnRlbnRUeXBlID0+IHtcbiAgICBjb25zdCBhdWdtZW50ID0gYXVnbWVudGVyc1tjb250ZW50VHlwZV1cbiAgICBjb25zdCBlbnRpdGllcyA9IGNvbnRlbnRbY29udGVudFR5cGVdXG5cbiAgICBpZiAoIWVudGl0aWVzKSB7XG4gICAgICBjb250ZW50W2NvbnRlbnRUeXBlXSA9IGF1Z21lbnQoe30sIGNvbnRlbnQsIGNvbmZpZylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICAgIGNvbnRlbnRbY29udGVudFR5cGVdID0gYXVnbWVudChlbnRpdGllcywgY29udGVudCwgY29uZmlnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29udGVudFtjb250ZW50VHlwZV0gPSBlbnRpdGllcy5tYXAoZW50aXR5ID0+IGF1Z21lbnQoZW50aXR5LCBjb250ZW50LCBjb25maWcpKVxuICB9KVxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Db250ZW50IChjb250ZW50LCB0cmFuc2Zvcm1lck5hbWUpIHtcbiAgY29uc3QgdHJhbnNmb3JtZXJGbiA9IHRyYW5zZm9ybWVyQnlOYW1lKHRyYW5zZm9ybWVyTmFtZSlcbiAgdHJhbnNmb3JtZXJGbihjb250ZW50KVxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1lckJ5TmFtZSAodHJhbnNmb3JtZXJOYW1lKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoYC4vY29udGVudC10cmFuc2Zvcm1lcnMvJHt0cmFuc2Zvcm1lck5hbWV9YClcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHRyYW5zZm9ybWVyIFwiJHt0cmFuc2Zvcm1lck5hbWV9XCJgKVxuICB9XG59XG4iXX0=