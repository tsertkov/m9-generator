"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveReferences;


function resolveReferences(content) {
  Object.keys(content).forEach(contentType => {
    const entities = content[contentType];
    if (!Array.isArray(entities)) {
      processEntity(content, entities);
    } else {
      entities.forEach(entity => processEntity(content, entity));
    }
  });

  return content;
}

function processEntity(srcContent, entity) {
  const { acf } = entity;
  if (!acf) return;

  Object.keys(acf).forEach(propertyName => {
    const propertyValue = acf[propertyName];
    if (!isReference(propertyValue)) return;

    acf[propertyName] = resolvePropertyReferences(srcContent, propertyName, propertyValue);
  });
}

function isReference(entity) {
  return Array.isArray(entity) && entity.length && entity[0].ID && entity[0].post_type;
}

function getReferencedEntity(content, refEntitySrc) {
  const {
    ID: id,
    post_type: postType
  } = refEntitySrc;

  const entities = content[postType];
  return entities ? getById(entities, id) : refEntitySrc;
}

function resolvePropertyReferences(content, propertyName, propertyValue) {
  return propertyValue.map(refEntitySrc => getReferencedEntity(content, refEntitySrc));
}

function getById(entities, id) {
  for (const entity of entities) {
    if (entity.id === id) return entity;
  }

  throw new Error(`Entity with id: '${id}' was not found in given list`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29udGVudC10cmFuc2Zvcm1lcnMvd29yZHByZXNzL3Jlc29sdmUtcmVmZXJlbmNlcy5qcyJdLCJuYW1lcyI6WyJyZXNvbHZlUmVmZXJlbmNlcyIsImNvbnRlbnQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImNvbnRlbnRUeXBlIiwiZW50aXRpZXMiLCJBcnJheSIsImlzQXJyYXkiLCJwcm9jZXNzRW50aXR5IiwiZW50aXR5Iiwic3JjQ29udGVudCIsImFjZiIsInByb3BlcnR5TmFtZSIsInByb3BlcnR5VmFsdWUiLCJpc1JlZmVyZW5jZSIsInJlc29sdmVQcm9wZXJ0eVJlZmVyZW5jZXMiLCJsZW5ndGgiLCJJRCIsInBvc3RfdHlwZSIsImdldFJlZmVyZW5jZWRFbnRpdHkiLCJyZWZFbnRpdHlTcmMiLCJpZCIsInBvc3RUeXBlIiwiZ2V0QnlJZCIsIm1hcCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFBZUEsaUI7OztBQUVmLFNBQVNBLGlCQUFULENBQTRCQyxPQUE1QixFQUFxQztBQUNuQ0MsU0FBT0MsSUFBUCxDQUFZRixPQUFaLEVBQXFCRyxPQUFyQixDQUE2QkMsZUFBZTtBQUMxQyxVQUFNQyxXQUFXTCxRQUFRSSxXQUFSLENBQWpCO0FBQ0EsUUFBSSxDQUFDRSxNQUFNQyxPQUFOLENBQWNGLFFBQWQsQ0FBTCxFQUE4QjtBQUM1Qkcsb0JBQWNSLE9BQWQsRUFBdUJLLFFBQXZCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLGVBQVNGLE9BQVQsQ0FBaUJNLFVBQVVELGNBQWNSLE9BQWQsRUFBdUJTLE1BQXZCLENBQTNCO0FBQ0Q7QUFDRixHQVBEOztBQVNBLFNBQU9ULE9BQVA7QUFDRDs7QUFFRCxTQUFTUSxhQUFULENBQXdCRSxVQUF4QixFQUFvQ0QsTUFBcEMsRUFBNEM7QUFDMUMsUUFBTSxFQUFFRSxHQUFGLEtBQVVGLE1BQWhCO0FBQ0EsTUFBSSxDQUFDRSxHQUFMLEVBQVU7O0FBRVZWLFNBQU9DLElBQVAsQ0FBWVMsR0FBWixFQUFpQlIsT0FBakIsQ0FBeUJTLGdCQUFnQjtBQUN2QyxVQUFNQyxnQkFBZ0JGLElBQUlDLFlBQUosQ0FBdEI7QUFDQSxRQUFJLENBQUNFLFlBQVlELGFBQVosQ0FBTCxFQUFpQzs7QUFFakNGLFFBQUlDLFlBQUosSUFBb0JHLDBCQUNsQkwsVUFEa0IsRUFFbEJFLFlBRmtCLEVBR2xCQyxhQUhrQixDQUFwQjtBQUtELEdBVEQ7QUFVRDs7QUFFRCxTQUFTQyxXQUFULENBQXNCTCxNQUF0QixFQUE4QjtBQUM1QixTQUNFSCxNQUFNQyxPQUFOLENBQWNFLE1BQWQsS0FDRUEsT0FBT08sTUFEVCxJQUVFUCxPQUFPLENBQVAsRUFBVVEsRUFGWixJQUdFUixPQUFPLENBQVAsRUFBVVMsU0FKZDtBQU1EOztBQUVELFNBQVNDLG1CQUFULENBQThCbkIsT0FBOUIsRUFBdUNvQixZQUF2QyxFQUFxRDtBQUNuRCxRQUFNO0FBQ0pILFFBQUlJLEVBREE7QUFFSkgsZUFBV0k7QUFGUCxNQUdGRixZQUhKOztBQUtBLFFBQU1mLFdBQVdMLFFBQVFzQixRQUFSLENBQWpCO0FBQ0EsU0FBT2pCLFdBQ0hrQixRQUFRbEIsUUFBUixFQUFrQmdCLEVBQWxCLENBREcsR0FFSEQsWUFGSjtBQUdEOztBQUVELFNBQVNMLHlCQUFULENBQW9DZixPQUFwQyxFQUE2Q1ksWUFBN0MsRUFBMkRDLGFBQTNELEVBQTBFO0FBQ3hFLFNBQU9BLGNBQWNXLEdBQWQsQ0FBa0JKLGdCQUN2QkQsb0JBQW9CbkIsT0FBcEIsRUFBNkJvQixZQUE3QixDQURLLENBQVA7QUFFRDs7QUFFRCxTQUFTRyxPQUFULENBQWtCbEIsUUFBbEIsRUFBNEJnQixFQUE1QixFQUFnQztBQUM5QixPQUFLLE1BQU1aLE1BQVgsSUFBcUJKLFFBQXJCLEVBQStCO0FBQzdCLFFBQUlJLE9BQU9ZLEVBQVAsS0FBY0EsRUFBbEIsRUFBc0IsT0FBT1osTUFBUDtBQUN2Qjs7QUFFRCxRQUFNLElBQUlnQixLQUFKLENBQVcsb0JBQW1CSixFQUFHLCtCQUFqQyxDQUFOO0FBQ0QiLCJmaWxlIjoicmVzb2x2ZS1yZWZlcmVuY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVJlZmVyZW5jZXNcblxuZnVuY3Rpb24gcmVzb2x2ZVJlZmVyZW5jZXMgKGNvbnRlbnQpIHtcbiAgT2JqZWN0LmtleXMoY29udGVudCkuZm9yRWFjaChjb250ZW50VHlwZSA9PiB7XG4gICAgY29uc3QgZW50aXRpZXMgPSBjb250ZW50W2NvbnRlbnRUeXBlXVxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICAgIHByb2Nlc3NFbnRpdHkoY29udGVudCwgZW50aXRpZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHByb2Nlc3NFbnRpdHkoY29udGVudCwgZW50aXR5KSlcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIGNvbnRlbnRcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0VudGl0eSAoc3JjQ29udGVudCwgZW50aXR5KSB7XG4gIGNvbnN0IHsgYWNmIH0gPSBlbnRpdHlcbiAgaWYgKCFhY2YpIHJldHVyblxuXG4gIE9iamVjdC5rZXlzKGFjZikuZm9yRWFjaChwcm9wZXJ0eU5hbWUgPT4ge1xuICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSBhY2ZbcHJvcGVydHlOYW1lXVxuICAgIGlmICghaXNSZWZlcmVuY2UocHJvcGVydHlWYWx1ZSkpIHJldHVyblxuXG4gICAgYWNmW3Byb3BlcnR5TmFtZV0gPSByZXNvbHZlUHJvcGVydHlSZWZlcmVuY2VzKFxuICAgICAgc3JjQ29udGVudCxcbiAgICAgIHByb3BlcnR5TmFtZSxcbiAgICAgIHByb3BlcnR5VmFsdWVcbiAgICApXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGlzUmVmZXJlbmNlIChlbnRpdHkpIHtcbiAgcmV0dXJuIChcbiAgICBBcnJheS5pc0FycmF5KGVudGl0eSkgJiZcbiAgICAgIGVudGl0eS5sZW5ndGggJiZcbiAgICAgIGVudGl0eVswXS5JRCAmJlxuICAgICAgZW50aXR5WzBdLnBvc3RfdHlwZVxuICApXG59XG5cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZWRFbnRpdHkgKGNvbnRlbnQsIHJlZkVudGl0eVNyYykge1xuICBjb25zdCB7XG4gICAgSUQ6IGlkLFxuICAgIHBvc3RfdHlwZTogcG9zdFR5cGVcbiAgfSA9IHJlZkVudGl0eVNyY1xuXG4gIGNvbnN0IGVudGl0aWVzID0gY29udGVudFtwb3N0VHlwZV1cbiAgcmV0dXJuIGVudGl0aWVzXG4gICAgPyBnZXRCeUlkKGVudGl0aWVzLCBpZClcbiAgICA6IHJlZkVudGl0eVNyY1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvcGVydHlSZWZlcmVuY2VzIChjb250ZW50LCBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWUpIHtcbiAgcmV0dXJuIHByb3BlcnR5VmFsdWUubWFwKHJlZkVudGl0eVNyYyA9PlxuICAgIGdldFJlZmVyZW5jZWRFbnRpdHkoY29udGVudCwgcmVmRW50aXR5U3JjKSlcbn1cblxuZnVuY3Rpb24gZ2V0QnlJZCAoZW50aXRpZXMsIGlkKSB7XG4gIGZvciAoY29uc3QgZW50aXR5IG9mIGVudGl0aWVzKSB7XG4gICAgaWYgKGVudGl0eS5pZCA9PT0gaWQpIHJldHVybiBlbnRpdHlcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgRW50aXR5IHdpdGggaWQ6ICcke2lkfScgd2FzIG5vdCBmb3VuZCBpbiBnaXZlbiBsaXN0YClcbn1cbiJdfQ==